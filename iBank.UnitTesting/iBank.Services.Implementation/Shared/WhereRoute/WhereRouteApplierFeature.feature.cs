// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace iBank.UnitTesting.IBank_Services_Implementation.Shared.WhereRoute
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WhereRouteApplierFeatureFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WhereRouteApplierFeature.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WhereRouteApplierFeature", "\tIn order to retrieve subsets of data\r\n\tAs a user\r\n\tI need to be able to filter a" +
                    " dataset based on leg and trip criteria", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "WhereRouteApplierFeature")))
            {
                global::iBank.UnitTesting.IBank_Services_Implementation.Shared.WhereRoute.WhereRouteApplierFeatureFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnOriginCriteria_ReturnAllLegs_IsIn_LegWithinATripMatchesFilter_Retur" +
            "nAllLegsOfThatTrip")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnOriginCriteria_ReturnAllLegs_IsIn_LegWithinATripMatchesFilter_ReturnAllLegsOfThatTrip()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnOriginCriteria_ReturnAllLegs_IsIn_LegWithinATripMatchesFilter_Retur" +
                    "nAllLegsOfThatTrip", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
  testRunner.And("reckey \'1\' leg \'3\' has an origin of \'CCC\' and a destination of \'DDD\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'YYY\' and a destination of \'XXX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
  testRunner.And("I want data that \'is\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("I filter the data on origin criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("I have \'3\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
  testRunner.And("reckey \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
  testRunner.And("reckey \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
  testRunner.And("a record with origin \'AAA\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
  testRunner.And("a record with origin \'BBB\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
  testRunner.And("a record with origin \'CCC\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnOriginCriteria_ReturnAllLegs_NotIn_LegWithinTripMatchesFilter_DontR" +
            "eturnAnyLegsForThatTrip")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnOriginCriteria_ReturnAllLegs_NotIn_LegWithinTripMatchesFilter_DontReturnAnyLegsForThatTrip()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnOriginCriteria_ReturnAllLegs_NotIn_LegWithinTripMatchesFilter_DontR" +
                    "eturnAnyLegsForThatTrip", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
  testRunner.And("reckey \'1\' leg \'3\' has an origin of \'CCC\' and a destination of \'DDD\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'YYY\' and a destination of \'XXX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
  testRunner.And("I want data that \'is not\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.When("I filter the data on origin criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("I have \'2\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
  testRunner.And("reckey \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
  testRunner.And("reckey \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
  testRunner.And("a record with origin \'YYY\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
  testRunner.And("a record with origin \'XXX\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnOriginCriteria_DontReturnAllLegs_IsIn_LegWithinTripMatchesFilter_Re" +
            "turnThatLeg")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnOriginCriteria_DontReturnAllLegs_IsIn_LegWithinTripMatchesFilter_ReturnThatLeg()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnOriginCriteria_DontReturnAllLegs_IsIn_LegWithinTripMatchesFilter_Re" +
                    "turnThatLeg", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
  testRunner.And("reckey \'1\' leg \'3\' has an origin of \'CCC\' and a destination of \'DDD\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'YYY\' and a destination of \'XXX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
  testRunner.And("I \'do not\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
  testRunner.And("I want data that \'is\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.When("I filter the data on origin criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 49
 testRunner.Then("I have \'1\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
  testRunner.And("reckey \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
  testRunner.And("reckey \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 52
  testRunner.And("a record with origin \'AAA\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnOriginCriteria_DontReturnAllLegs_NotIn_ReturnAllLegsThatDoNotMatchF" +
            "ilter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnOriginCriteria_DontReturnAllLegs_NotIn_ReturnAllLegsThatDoNotMatchFilter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnOriginCriteria_DontReturnAllLegs_NotIn_ReturnAllLegsThatDoNotMatchF" +
                    "ilter", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
  testRunner.And("reckey \'1\' leg \'3\' has an origin of \'CCC\' and a destination of \'DDD\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'YYY\' and a destination of \'XXX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
  testRunner.And("I \'do not\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
  testRunner.And("I want data that \'is not\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.When("I filter the data on origin criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
 testRunner.Then("I have \'4\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 65
  testRunner.And("reckey \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
  testRunner.And("reckey \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
  testRunner.And("a record with origin \'BBB\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
  testRunner.And("a record with origin \'CCC\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
  testRunner.And("a record with origin \'YYY\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
  testRunner.And("a record with origin \'XXX\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnOriginCriteria__MultipleCriteria_ReturnAllLegs_IsIn_LegWithinATripM" +
            "atchesFilter_ReturnAllLegsOfThatTrip")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnOriginCriteria__MultipleCriteria_ReturnAllLegs_IsIn_LegWithinATripMatchesFilter_ReturnAllLegsOfThatTrip()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnOriginCriteria__MultipleCriteria_ReturnAllLegs_IsIn_LegWithinATripM" +
                    "atchesFilter_ReturnAllLegsOfThatTrip", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
  testRunner.And("reckey \'1\' leg \'3\' has an origin of \'CCC\' and a destination of \'DDD\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'YYY\' and a destination of \'XXX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'EEE\' and a destination of \'FFF\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
  testRunner.And("I have origin criteria of \'EEE\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
  testRunner.And("I want data that \'is\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
 testRunner.When("I filter the data on origin criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 84
 testRunner.Then("I have \'4\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 85
  testRunner.And("reckey \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
  testRunner.And("reckey \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
  testRunner.And("reckey \'3\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
  testRunner.And("a record with origin \'AAA\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
  testRunner.And("a record with origin \'BBB\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
  testRunner.And("a record with origin \'CCC\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
  testRunner.And("a record with origin \'EEE\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationCriteria_ReturnAllLegs_IsIn_LegWithinATripMatchesFilter_" +
            "ReturnAllLegsOfThatTrip")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnDestinationCriteria_ReturnAllLegs_IsIn_LegWithinATripMatchesFilter_ReturnAllLegsOfThatTrip()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationCriteria_ReturnAllLegs_IsIn_LegWithinATripMatchesFilter_" +
                    "ReturnAllLegsOfThatTrip", ((string[])(null)));
#line 93
this.ScenarioSetup(scenarioInfo);
#line 94
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 95
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
  testRunner.And("reckey \'1\' leg \'3\' has an origin of \'CCC\' and a destination of \'DDD\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'YYY\' and a destination of \'XXX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
  testRunner.And("I want data that \'is\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
 testRunner.When("I filter the data on destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 103
 testRunner.Then("I have \'3\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 104
  testRunner.And("reckey \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
  testRunner.And("reckey \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
  testRunner.And("a record with origin \'AAA\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 107
  testRunner.And("a record with origin \'BBB\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
  testRunner.And("a record with origin \'CCC\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationCriteria_ReturnAllLegs_NotIn_LegWithinTripMatchesFilter_" +
            "DontReturnAnyLegsForThatTrip")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnDestinationCriteria_ReturnAllLegs_NotIn_LegWithinTripMatchesFilter_DontReturnAnyLegsForThatTrip()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationCriteria_ReturnAllLegs_NotIn_LegWithinTripMatchesFilter_" +
                    "DontReturnAnyLegsForThatTrip", ((string[])(null)));
#line 110
this.ScenarioSetup(scenarioInfo);
#line 111
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 112
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
  testRunner.And("reckey \'1\' leg \'3\' has an origin of \'CCC\' and a destination of \'DDD\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'YYY\' and a destination of \'XXX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 117
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
  testRunner.And("I want data that \'is not\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 119
 testRunner.When("I filter the data on destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 120
 testRunner.Then("I have \'2\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 121
  testRunner.And("reckey \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
  testRunner.And("reckey \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
  testRunner.And("a record with origin \'YYY\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
  testRunner.And("a record with origin \'XXX\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationCriteria_DontReturnAllLegs_IsIn_LegWithinTripMatchesFilt" +
            "er_ReturnThatLeg")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnDestinationCriteria_DontReturnAllLegs_IsIn_LegWithinTripMatchesFilter_ReturnThatLeg()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationCriteria_DontReturnAllLegs_IsIn_LegWithinTripMatchesFilt" +
                    "er_ReturnThatLeg", ((string[])(null)));
#line 126
this.ScenarioSetup(scenarioInfo);
#line 127
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 128
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
  testRunner.And("reckey \'1\' leg \'3\' has an origin of \'CCC\' and a destination of \'DDD\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'YYY\' and a destination of \'XXX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
  testRunner.And("I \'do not\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
  testRunner.And("I want data that \'is\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
 testRunner.When("I filter the data on destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 136
 testRunner.Then("I have \'1\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 137
  testRunner.And("reckey \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
  testRunner.And("reckey \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 139
  testRunner.And("a record with origin \'AAA\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationCriteria_DontReturnAllLegs_NotIn_ReturnAllLegsOfThatDoNo" +
            "tMatchFilter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnDestinationCriteria_DontReturnAllLegs_NotIn_ReturnAllLegsOfThatDoNotMatchFilter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationCriteria_DontReturnAllLegs_NotIn_ReturnAllLegsOfThatDoNo" +
                    "tMatchFilter", ((string[])(null)));
#line 141
this.ScenarioSetup(scenarioInfo);
#line 142
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 143
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
  testRunner.And("reckey \'1\' leg \'3\' has an origin of \'CCC\' and a destination of \'DDD\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'YYY\' and a destination of \'XXX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
  testRunner.And("I \'do not\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
  testRunner.And("I want data that \'is not\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
 testRunner.When("I filter the data on destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 151
 testRunner.Then("I have \'4\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 152
  testRunner.And("reckey \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
  testRunner.And("reckey \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
  testRunner.And("a record with origin \'BBB\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
  testRunner.And("a record with origin \'CCC\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 156
  testRunner.And("a record with origin \'YYY\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
  testRunner.And("a record with origin \'XXX\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationCriteria__MultipleCriteria_ReturnAllLegs_IsIn_LegWithinA" +
            "TripMatchesFilter_ReturnAllLegsOfThatTrip")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnDestinationCriteria__MultipleCriteria_ReturnAllLegs_IsIn_LegWithinATripMatchesFilter_ReturnAllLegsOfThatTrip()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationCriteria__MultipleCriteria_ReturnAllLegs_IsIn_LegWithinA" +
                    "TripMatchesFilter_ReturnAllLegsOfThatTrip", ((string[])(null)));
#line 159
this.ScenarioSetup(scenarioInfo);
#line 160
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 161
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 162
  testRunner.And("reckey \'1\' leg \'3\' has an origin of \'CCC\' and a destination of \'DDD\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 163
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'YYY\' and a destination of \'XXX\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'EEE\' and a destination of \'FFF\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
  testRunner.And("I have destination criteria of \'FFF\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
  testRunner.And("I want data that \'is\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
 testRunner.When("I filter the data on destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 171
 testRunner.Then("I have \'4\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 172
  testRunner.And("reckey \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
  testRunner.And("reckey \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
  testRunner.And("reckey \'3\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
  testRunner.And("a record with origin \'AAA\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
  testRunner.And("a record with origin \'BBB\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
  testRunner.And("a record with origin \'CCC\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
  testRunner.And("a record with origin \'EEE\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationAndOriginCriteria_ReturnAllLegs_NotIn_DontReturnAnyTrips" +
            "ThatMatchOriginAndDestinationInAtLeastOneLeg")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnDestinationAndOriginCriteria_ReturnAllLegs_NotIn_DontReturnAnyTripsThatMatchOriginAndDestinationInAtLeastOneLeg()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationAndOriginCriteria_ReturnAllLegs_NotIn_DontReturnAnyTrips" +
                    "ThatMatchOriginAndDestinationInAtLeastOneLeg", ((string[])(null)));
#line 200
this.ScenarioSetup(scenarioInfo);
#line 201
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 202
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 204
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 206
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 209
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 210
  testRunner.And("I want data that \'is not\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
 testRunner.When("I filter the data on origin and destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 212
 testRunner.Then("I have \'4\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 213
  testRunner.And("reckey \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
  testRunner.And("reckey \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
  testRunner.And("reckey \'3\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
  testRunner.And("reckey \'4\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
  testRunner.And("a record with origin \'AAA\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 218
  testRunner.And("a record with origin \'XXX\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 219
  testRunner.And("a record with origin \'ZZZ\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 220
  testRunner.And("a record with origin \'TTT\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationAndOriginCriteria_DontReturnAllLegs_IsIn_ReturnAnyLegOfA" +
            "nyTripThatMatchesOriginAndDestination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnDestinationAndOriginCriteria_DontReturnAllLegs_IsIn_ReturnAnyLegOfAnyTripThatMatchesOriginAndDestination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationAndOriginCriteria_DontReturnAllLegs_IsIn_ReturnAnyLegOfA" +
                    "nyTripThatMatchesOriginAndDestination", ((string[])(null)));
#line 222
this.ScenarioSetup(scenarioInfo);
#line 223
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 224
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 226
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 227
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 228
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 229
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 230
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 231
  testRunner.And("I \'do not\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
  testRunner.And("I want data that \'is\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 233
 testRunner.When("I filter the data on origin and destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 234
 testRunner.Then("I have \'1\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 235
  testRunner.And("reckey \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
  testRunner.And("reckey \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 237
  testRunner.And("reckey \'3\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 238
  testRunner.And("reckey \'4\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
  testRunner.And("a record with origin \'AAA\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationAndOriginCriteria_DontReturnAllLegs_NotIn_ReturnAllLegsT" +
            "hatDoNotMatchBothOriginAndDestinationFilter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnDestinationAndOriginCriteria_DontReturnAllLegs_NotIn_ReturnAllLegsThatDoNotMatchBothOriginAndDestinationFilter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationAndOriginCriteria_DontReturnAllLegs_NotIn_ReturnAllLegsT" +
                    "hatDoNotMatchBothOriginAndDestinationFilter", ((string[])(null)));
#line 241
this.ScenarioSetup(scenarioInfo);
#line 242
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 243
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 244
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 245
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 246
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 247
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 248
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 249
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 250
  testRunner.And("I \'do not\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 251
  testRunner.And("I want data that \'is not\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 252
 testRunner.When("I filter the data on origin and destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 253
 testRunner.Then("I have \'5\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 254
  testRunner.And("reckey \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 255
  testRunner.And("reckey \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
  testRunner.And("reckey \'3\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
  testRunner.And("reckey \'4\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 258
  testRunner.And("a record with origin \'BBB\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 259
  testRunner.And("a record with origin \'AAA\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 260
  testRunner.And("a record with origin \'XXX\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 261
  testRunner.And("a record with origin \'ZZZ\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 262
  testRunner.And("a record with origin \'TTT\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationOrOriginCriteria_ReturnAllLegs_IsIn_ReturnAllLegsOfTrips" +
            "WhereOriginOrDestinationMatchesCriteriaInAtLeastOneLeg")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnDestinationOrOriginCriteria_ReturnAllLegs_IsIn_ReturnAllLegsOfTripsWhereOriginOrDestinationMatchesCriteriaInAtLeastOneLeg()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationOrOriginCriteria_ReturnAllLegs_IsIn_ReturnAllLegsOfTrips" +
                    "WhereOriginOrDestinationMatchesCriteriaInAtLeastOneLeg", ((string[])(null)));
#line 264
this.ScenarioSetup(scenarioInfo);
#line 265
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 266
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 267
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'DDD\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 268
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 269
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 270
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 271
  testRunner.And("I have criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 272
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 273
  testRunner.And("I want data that \'is\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 274
 testRunner.When("I filter the data on origin or destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 275
 testRunner.Then("I have \'4\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 276
  testRunner.And("reckey \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 277
  testRunner.And("reckey \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 278
  testRunner.And("reckey \'3\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 279
  testRunner.And("reckey \'4\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 280
  testRunner.And("a record with origin \'AAA\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 281
  testRunner.And("a record with origin \'BBB\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 282
  testRunner.And("a record with origin \'DDD\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 283
  testRunner.And("a record with origin \'XXX\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationOrOriginCriteria_ReturnAllLegs_NotIn_DontReturnAnyTripsW" +
            "hereCriteriaMatchesOriginOrDestinationInAtLeastOneLeg")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnDestinationOrOriginCriteria_ReturnAllLegs_NotIn_DontReturnAnyTripsWhereCriteriaMatchesOriginOrDestinationInAtLeastOneLeg()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationOrOriginCriteria_ReturnAllLegs_NotIn_DontReturnAnyTripsW" +
                    "hereCriteriaMatchesOriginOrDestinationInAtLeastOneLeg", ((string[])(null)));
#line 285
this.ScenarioSetup(scenarioInfo);
#line 286
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 287
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 288
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'DDD\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 289
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 291
  testRunner.And("reckey \'3\' leg \'2\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
  testRunner.And("I have criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 293
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 294
  testRunner.And("I want data that \'is not\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 295
 testRunner.When("I filter the data on origin or destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 296
 testRunner.Then("I have \'2\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 297
  testRunner.And("reckey \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 298
  testRunner.And("reckey \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 299
  testRunner.And("reckey \'3\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 300
  testRunner.And("a record with origin \'ZZZ\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 301
  testRunner.And("a record with origin \'TTT\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationOrOriginCriteria_DontReturnAllLegs_IsIn_ReturnAnyLegOfAn" +
            "yTripWhereCriteriaMatchesOriginOrDestination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierFeature")]
        public virtual void GetDataBasedOnDestinationOrOriginCriteria_DontReturnAllLegs_IsIn_ReturnAnyLegOfAnyTripWhereCriteriaMatchesOriginOrDestination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationOrOriginCriteria_DontReturnAllLegs_IsIn_ReturnAnyLegOfAn" +
                    "yTripWhereCriteriaMatchesOriginOrDestination", ((string[])(null)));
#line 303
this.ScenarioSetup(scenarioInfo);
#line 304
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 305
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 306
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'DDD\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 307
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 308
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 309
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 310
  testRunner.And("I have criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 311
  testRunner.And("I \'do not\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 312
  testRunner.And("I want data that \'is\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 313
 testRunner.When("I filter the data on origin or destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 314
 testRunner.Then("I have \'2\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 315
  testRunner.And("reckey \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 316
  testRunner.And("reckey \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 317
  testRunner.And("reckey \'3\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 318
  testRunner.And("reckey \'4\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 319
  testRunner.And("a record with origin \'AAA\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 320
  testRunner.And("a record with origin \'DDD\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
