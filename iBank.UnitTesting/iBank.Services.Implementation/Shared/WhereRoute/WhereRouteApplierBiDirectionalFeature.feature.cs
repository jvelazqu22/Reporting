// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace iBank.UnitTesting.IBank_Services_Implementation.Shared.WhereRoute
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WhereRouteApplierBiDirectionalFeatureFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WhereRouteApplierBiDirectionalFeature.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WhereRouteApplierBiDirectionalFeature", "\tIn order to retrieve subsets of data correctly\r\n\tAs a user\r\n\tI need to be able t" +
                    "o filter a dataset based on leg and trip criteria", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "WhereRouteApplierBiDirectionalFeature")))
            {
                global::iBank.UnitTesting.IBank_Services_Implementation.Shared.WhereRoute.WhereRouteApplierBiDirectionalFeatureFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationAndOriginCriteria_ReturnAllLegs_IsIn_ReturnAllLegsOfTrip" +
            "sThatAtLeastOneLegMatchOriginAndDestinationInBiDirection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierBiDirectionalFeature")]
        public virtual void GetDataBasedOnDestinationAndOriginCriteria_ReturnAllLegs_IsIn_ReturnAllLegsOfTripsThatAtLeastOneLegMatchOriginAndDestinationInBiDirection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationAndOriginCriteria_ReturnAllLegs_IsIn_ReturnAllLegsOfTrip" +
                    "sThatAtLeastOneLegMatchOriginAndDestinationInBiDirection", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
  testRunner.And("reckey \'5\' leg \'1\' has an origin of \'BBB\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
  testRunner.And("I want data that \'is\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.When("I filter the data on origin and destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("I have \'3\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
  testRunner.And("reckey \'1\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
  testRunner.And("reckey \'1\' and leg \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
  testRunner.And("reckey \'2\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
  testRunner.And("reckey \'2\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
  testRunner.And("reckey \'3\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
  testRunner.And("reckey \'4\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
  testRunner.And("reckey \'5\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationAndOriginCriteria_DontReturnAllLegs_IsIn_ReturnAnyLegOfA" +
            "nyTripThatMatchOriginAndDestinationInBiDirection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierBiDirectionalFeature")]
        public virtual void GetDataBasedOnDestinationAndOriginCriteria_DontReturnAllLegs_IsIn_ReturnAnyLegOfAnyTripThatMatchOriginAndDestinationInBiDirection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationAndOriginCriteria_DontReturnAllLegs_IsIn_ReturnAnyLegOfA" +
                    "nyTripThatMatchOriginAndDestinationInBiDirection", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
  testRunner.And("reckey \'5\' leg \'1\' has an origin of \'BBB\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
  testRunner.And("I \'do not\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
  testRunner.And("I want data that \'is\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.When("I filter the data on origin and destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then("I have \'2\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
  testRunner.And("reckey \'1\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
  testRunner.And("reckey \'1\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
  testRunner.And("reckey \'2\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
  testRunner.And("reckey \'2\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
  testRunner.And("reckey \'3\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
  testRunner.And("reckey \'4\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
  testRunner.And("reckey \'5\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationAndOriginCriteria_ReturnAllLegs_NotIn_ReturnTripsThatNot" +
            "ASingleLegMatchOriginAndDestinationInBiDirection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierBiDirectionalFeature")]
        public virtual void GetDataBasedOnDestinationAndOriginCriteria_ReturnAllLegs_NotIn_ReturnTripsThatNotASingleLegMatchOriginAndDestinationInBiDirection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationAndOriginCriteria_ReturnAllLegs_NotIn_ReturnTripsThatNot" +
                    "ASingleLegMatchOriginAndDestinationInBiDirection", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
  testRunner.And("reckey \'5\' leg \'1\' has an origin of \'BBB\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 60
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
  testRunner.And("I want data that \'is not\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.When("I filter the data on origin and destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("I have \'4\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
  testRunner.And("reckey \'1\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
  testRunner.And("reckey \'1\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
  testRunner.And("reckey \'2\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
  testRunner.And("reckey \'2\' and leg \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
  testRunner.And("reckey \'3\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
  testRunner.And("reckey \'4\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
  testRunner.And("reckey \'5\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnDestinationAndOriginCriteria_DontReturnAllLegs_NotIn_ReturnAllLegsT" +
            "hatDoNotMatchBothOriginAndDestinationInBiDirection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierBiDirectionalFeature")]
        public virtual void GetDataBasedOnDestinationAndOriginCriteria_DontReturnAllLegs_NotIn_ReturnAllLegsThatDoNotMatchBothOriginAndDestinationInBiDirection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnDestinationAndOriginCriteria_DontReturnAllLegs_NotIn_ReturnAllLegsT" +
                    "hatDoNotMatchBothOriginAndDestinationInBiDirection", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 77
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 79
  testRunner.And("reckey \'5\' leg \'1\' has an origin of \'BBB\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
  testRunner.And("I \'do not\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 83
  testRunner.And("I want data that \'is not\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.When("I filter the data on origin and destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 85
 testRunner.Then("I have \'5\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 86
  testRunner.And("reckey \'1\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
  testRunner.And("reckey \'1\' and leg \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
  testRunner.And("reckey \'2\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
  testRunner.And("reckey \'2\' and leg \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
  testRunner.And("reckey \'3\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 91
  testRunner.And("reckey \'4\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 92
  testRunner.And("reckey \'5\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnOriginOrDestinationCriteria_ReturnAllLegs_IsIn_ReturnLegsOfTripsTha" +
            "tAtLeastOneLegMatchEitherOriginOrDestination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierBiDirectionalFeature")]
        public virtual void GetDataBasedOnOriginOrDestinationCriteria_ReturnAllLegs_IsIn_ReturnLegsOfTripsThatAtLeastOneLegMatchEitherOriginOrDestination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnOriginOrDestinationCriteria_ReturnAllLegs_IsIn_ReturnLegsOfTripsTha" +
                    "tAtLeastOneLegMatchEitherOriginOrDestination", ((string[])(null)));
#line 94
this.ScenarioSetup(scenarioInfo);
#line 95
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
  testRunner.And("reckey \'5\' leg \'1\' has an origin of \'BBB\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 102
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
  testRunner.And("I want data that \'is\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 106
 testRunner.When("I filter the data on origin or destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 107
 testRunner.Then("I have \'6\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 108
  testRunner.And("reckey \'1\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 109
  testRunner.And("reckey \'1\' and leg \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
  testRunner.And("reckey \'2\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 111
  testRunner.And("reckey \'2\' and leg \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
  testRunner.And("reckey \'3\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
  testRunner.And("reckey \'4\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 114
  testRunner.And("reckey \'5\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnOriginOrDestinationCriteria_ReturnAllLegs_NotIn_ReturnLegsOfTripsTh" +
            "atNotEvenOneLegMatchEitherOriginNorDestination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierBiDirectionalFeature")]
        public virtual void GetDataBasedOnOriginOrDestinationCriteria_ReturnAllLegs_NotIn_ReturnLegsOfTripsThatNotEvenOneLegMatchEitherOriginNorDestination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnOriginOrDestinationCriteria_ReturnAllLegs_NotIn_ReturnLegsOfTripsTh" +
                    "atNotEvenOneLegMatchEitherOriginNorDestination", ((string[])(null)));
#line 117
this.ScenarioSetup(scenarioInfo);
#line 118
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 119
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 121
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 122
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 124
  testRunner.And("reckey \'5\' leg \'1\' has an origin of \'BBB\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 126
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
  testRunner.And("I want data that \'is not\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 129
 testRunner.When("I filter the data on origin or destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 130
 testRunner.Then("I have \'1\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 131
  testRunner.And("reckey \'1\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
  testRunner.And("reckey \'1\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
  testRunner.And("reckey \'2\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
  testRunner.And("reckey \'2\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 135
  testRunner.And("reckey \'3\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 136
  testRunner.And("reckey \'4\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 137
  testRunner.And("reckey \'5\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnOriginOrDestinationCriteria_DontReturnAllLegs_IsIn_ReturnLegsThatEi" +
            "therMatchOriginOrDestination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierBiDirectionalFeature")]
        public virtual void GetDataBasedOnOriginOrDestinationCriteria_DontReturnAllLegs_IsIn_ReturnLegsThatEitherMatchOriginOrDestination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnOriginOrDestinationCriteria_DontReturnAllLegs_IsIn_ReturnLegsThatEi" +
                    "therMatchOriginOrDestination", ((string[])(null)));
#line 139
this.ScenarioSetup(scenarioInfo);
#line 140
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 141
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 144
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
  testRunner.And("reckey \'5\' leg \'1\' has an origin of \'BBB\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 149
  testRunner.And("I \'do not\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 150
  testRunner.And("I want data that \'is\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 151
 testRunner.When("I filter the data on origin or destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 152
 testRunner.Then("I have \'5\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 153
  testRunner.And("reckey \'1\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
  testRunner.And("reckey \'1\' and leg \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
  testRunner.And("reckey \'2\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 156
  testRunner.And("reckey \'2\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 157
  testRunner.And("reckey \'3\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 158
  testRunner.And("reckey \'4\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
  testRunner.And("reckey \'5\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnOriginOrDestinationCriteria_DontReturnAllLegs_NotIn_ReturnLegsOfTri" +
            "psThatNotEvenOneLegMatchEitherOriginNorDestination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierBiDirectionalFeature")]
        public virtual void GetDataBasedOnOriginOrDestinationCriteria_DontReturnAllLegs_NotIn_ReturnLegsOfTripsThatNotEvenOneLegMatchEitherOriginNorDestination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnOriginOrDestinationCriteria_DontReturnAllLegs_NotIn_ReturnLegsOfTri" +
                    "psThatNotEvenOneLegMatchEitherOriginNorDestination", ((string[])(null)));
#line 162
this.ScenarioSetup(scenarioInfo);
#line 163
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 164
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 167
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
  testRunner.And("reckey \'5\' leg \'1\' has an origin of \'BBB\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 170
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 171
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 172
  testRunner.And("I \'do not\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
  testRunner.And("I want data that \'is not\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
 testRunner.When("I filter the data on origin or destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 175
 testRunner.Then("I have \'2\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 176
  testRunner.And("reckey \'1\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
  testRunner.And("reckey \'1\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
  testRunner.And("reckey \'2\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 179
  testRunner.And("reckey \'2\' and leg \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 180
  testRunner.And("reckey \'3\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 181
  testRunner.And("reckey \'4\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 182
  testRunner.And("reckey \'5\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnOriginOrDestinationCriteria_DontReturnAllLegs_NotIn_NoOrigin_Return" +
            "LegsOfTripThatMatchesOriginOrDestination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierBiDirectionalFeature")]
        public virtual void GetDataBasedOnOriginOrDestinationCriteria_DontReturnAllLegs_NotIn_NoOrigin_ReturnLegsOfTripThatMatchesOriginOrDestination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnOriginOrDestinationCriteria_DontReturnAllLegs_NotIn_NoOrigin_Return" +
                    "LegsOfTripThatMatchesOriginOrDestination", ((string[])(null)));
#line 185
this.ScenarioSetup(scenarioInfo);
#line 186
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 187
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 190
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 191
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 192
  testRunner.And("reckey \'5\' leg \'1\' has an origin of \'BBB\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 193
  testRunner.And("I have destination criteria of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 194
  testRunner.And("I \'do not\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 195
  testRunner.And("I want data that \'is not\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 196
 testRunner.When("I filter the data on origin or destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 197
 testRunner.Then("I have \'3\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 198
  testRunner.And("reckey \'1\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 199
  testRunner.And("reckey \'1\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
  testRunner.And("reckey \'2\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 201
  testRunner.And("reckey \'2\' and leg \'2\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 202
  testRunner.And("reckey \'3\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
  testRunner.And("reckey \'4\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 204
  testRunner.And("reckey \'5\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnOriginOrDestinationCriteria_DontReturnAllLegs_IsIn_NoOrigin_ReturnL" +
            "egsOfTripThatMatchesOriginOrDestination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierBiDirectionalFeature")]
        public virtual void GetDataBasedOnOriginOrDestinationCriteria_DontReturnAllLegs_IsIn_NoOrigin_ReturnLegsOfTripThatMatchesOriginOrDestination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnOriginOrDestinationCriteria_DontReturnAllLegs_IsIn_NoOrigin_ReturnL" +
                    "egsOfTripThatMatchesOriginOrDestination", ((string[])(null)));
#line 208
this.ScenarioSetup(scenarioInfo);
#line 209
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 210
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'BBB\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
  testRunner.And("I have destination criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
  testRunner.And("I \'do not\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
  testRunner.And("I want data that \'is\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 218
 testRunner.When("I filter the data on origin or destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 219
 testRunner.Then("I have \'3\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 220
  testRunner.And("reckey \'1\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 221
  testRunner.And("reckey \'1\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 222
  testRunner.And("reckey \'2\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 223
  testRunner.And("reckey \'2\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 224
  testRunner.And("reckey \'3\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 225
  testRunner.And("reckey \'4\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnOriginOrDestinationCriteria_ReturnAllLegs_NotIn_NoOrigin_ReturnLegs" +
            "OfTripThatDontMatchesOriginAndDestination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierBiDirectionalFeature")]
        public virtual void GetDataBasedOnOriginOrDestinationCriteria_ReturnAllLegs_NotIn_NoOrigin_ReturnLegsOfTripThatDontMatchesOriginAndDestination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnOriginOrDestinationCriteria_ReturnAllLegs_NotIn_NoOrigin_ReturnLegs" +
                    "OfTripThatDontMatchesOriginAndDestination", ((string[])(null)));
#line 229
this.ScenarioSetup(scenarioInfo);
#line 230
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 231
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 232
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 233
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 235
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'TTT\' and a destination of \'SSS\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 236
  testRunner.And("reckey \'5\' leg \'1\' has an origin of \'BBB\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 237
  testRunner.And("I have origin criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 238
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 239
  testRunner.And("I want data that \'is not\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 240
 testRunner.When("I filter the data on origin or destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 241
 testRunner.Then("I have \'2\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 242
  testRunner.And("reckey \'1\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 243
  testRunner.And("reckey \'1\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 244
  testRunner.And("reckey \'2\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 245
  testRunner.And("reckey \'2\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 246
  testRunner.And("reckey \'3\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 247
  testRunner.And("reckey \'4\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 248
  testRunner.And("reckey \'5\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("GetDataBasedOnOriginOrDestinationCriteria_ReturnAllLegs_NotIn_NoOrigin_ReturnTrip" +
            "ThatDoesntMatchesEitherOriginOrDestination")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WhereRouteApplierBiDirectionalFeature")]
        public virtual void GetDataBasedOnOriginOrDestinationCriteria_ReturnAllLegs_NotIn_NoOrigin_ReturnTripThatDoesntMatchesEitherOriginOrDestination()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("GetDataBasedOnOriginOrDestinationCriteria_ReturnAllLegs_NotIn_NoOrigin_ReturnTrip" +
                    "ThatDoesntMatchesEitherOriginOrDestination", ((string[])(null)));
#line 251
this.ScenarioSetup(scenarioInfo);
#line 252
 testRunner.Given("reckey \'1\' leg \'1\' has an origin of \'AAA\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 253
  testRunner.And("reckey \'1\' leg \'2\' has an origin of \'BBB\' and a destination of \'CCC\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 254
  testRunner.And("reckey \'2\' leg \'1\' has an origin of \'AAA\' and a destination of \'ZZZ\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 255
  testRunner.And("reckey \'2\' leg \'2\' has an origin of \'XXX\' and a destination of \'YYY\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 256
  testRunner.And("reckey \'3\' leg \'1\' has an origin of \'ZZZ\' and a destination of \'BBB\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 257
  testRunner.And("reckey \'4\' leg \'1\' has an origin of \'BBB\' and a destination of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 258
  testRunner.And("I have destination criteria of \'AAA\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 259
  testRunner.And("I \'do\' want to return all legs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 260
  testRunner.And("I want data that \'is not\' in the criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 261
 testRunner.When("I filter the data on origin or destination criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 262
 testRunner.Then("I have \'1\' total records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 263
  testRunner.And("reckey \'1\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 264
  testRunner.And("reckey \'1\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 265
  testRunner.And("reckey \'2\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 266
  testRunner.And("reckey \'2\' and leg \'2\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 267
  testRunner.And("reckey \'3\' and leg \'1\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 268
  testRunner.And("reckey \'4\' and leg \'1\' does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
